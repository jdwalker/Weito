#created on: Feb 23, 2012
#Style based on Agile Conference 2005
package drools

global DocumentStatistics stats


/*
rule "Heading pattern for ordered letters (A,B,C..)"
no-loop
ruleflow-group "genMatch"
	when
		$tm : TextMatch( $text : text, $startpos : startpos, $endpos : endpos ) from TextMatch.match("^[A-Z](\\.|:|\\)).+$", stats.fulltext)
		$sw : StyledWrapper() or StyledWrapper()
		//or TextMatch($text : text, $startpos : startpos, $endpos : endpos) from TextMatch.match("^[A-Z](\\.|:|\\)).+$", stats.fulltext )
		not TextDataMatcher( match == $tm )
	then
		insert( $tm );
		TextDataMatcher tdm = new TextDataMatcher( $text, $startpos, $endpos, $tm );
		insert( tdm);
		String type = "heading";
		String subtype = "letters";
		Set<RuleInfo> ruleslist = new HashSet<RuleInfo>();
		RuleInfo ri = new RuleInfo( drools.getRule().getName() );
    	insert( ri );
    	ruleslist.add( ri );
		insert( new TextWrapper( tdm, ruleslist, new MatchInfo(type, subtype) ) );
end

rule "Heading pattern for ordered numbers (1,2,3...)"
no-loop
ruleflow-group "genMatch"
	when
		$tm : TextMatch( $text : text, $startpos : startpos, $endpos : endpos ) from TextMatch.match("^[0-9]{1,2}(\\.|:|\\)).+$", stats.fulltext )
		not TextDataMatcher( match == $tm )
	then
		insert( $tm );
		TextDataMatcher tdm = new TextDataMatcher( $text, $startpos, $endpos, $tm );
		insert( tdm);
		String type = "heading";
		String subtype = "numbers";
		Set<RuleInfo> ruleslist = new HashSet<RuleInfo>();
		RuleInfo ri = new RuleInfo( drools.getRule().getName() );
    	insert( ri );
    	ruleslist.add( ri );
		insert( new TextWrapper( tdm, ruleslist, new MatchInfo(type, subtype) ) );
end

rule "Heading pattern for roman numerals (I,II,III...)"
no-loop
ruleflow-group "genMatch"
	when
		$tm : TextMatch( $text : text, $startpos : startpos, $endpos : endpos ) from TextMatch.match("^[IVX]+(\\.|:|\\)).+$", stats.fulltext )
		not TextDataMatcher( match == $tm )
	then
		insert( $tm );
		TextDataMatcher tdm = new TextDataMatcher( $text, $startpos, $endpos, $tm );
		insert( tdm);
		String type = "heading";
		String subtype = "roman";
		Set<RuleInfo> ruleslist = new HashSet<RuleInfo>();
		RuleInfo ri = new RuleInfo( drools.getRule().getName() );
    	insert( ri );
    	ruleslist.add( ri );
		insert( new TextWrapper( tdm, ruleslist, new MatchInfo(type, subtype) ) );
end

rule "References pattern"
no-loop
ruleflow-group "genMatch"
	when
		$tm : TextMatch( $text : text, $startpos : startpos, $endpos : endpos ) from TextMatch.match("(?s).*R(?i)eferences.*", stats.fulltext )
		not TextDataMatcher( match == $tm )
	then
		insert( $tm );
		TextDataMatcher tdm = new TextDataMatcher( $text, $startpos, $endpos, $tm );
		insert( tdm);
		String type = "references";
		String subtype = "";
		Set<RuleInfo> ruleslist = new HashSet<RuleInfo>();
		RuleInfo ri = new RuleInfo( drools.getRule().getName() );
    	insert( ri );
    	ruleslist.add( ri );
		insert( new TextWrapper( tdm, ruleslist, new MatchInfo(type, subtype) ) );
end

rule "Conclusion pattern"
no-loop
ruleflow-group "genMatch"
	when
		$tm : TextMatch( $text : text, $startpos : startpos, $endpos : endpos ) from TextMatch.match("(?s).*(C|S)(?i)(ummary|onclusion).*", stats.fulltext )
		not TextDataMatcher( match == $tm )
	then
		insert( $tm );
		TextDataMatcher tdm = new TextDataMatcher( $text, $startpos, $endpos, $tm );
		insert( tdm);
		String type = "references";
		String subtype = "";
		Set<RuleInfo> ruleslist = new HashSet<RuleInfo>();
		RuleInfo ri = new RuleInfo( drools.getRule().getName() );
    	insert( ri );
    	ruleslist.add( ri );
		insert( new TextWrapper( tdm, ruleslist, new MatchInfo(type, subtype) ) );
end

rule "Abstract text pattern"
no-loop
ruleflow-group "genMatch"
	when
		$tm : TextMatch( $text : text, $startpos : startpos, $endpos : endpos ) from TextMatch.match("(?s).*A(?i)bstract.*", stats.fulltext )
		not TextDataMatcher( match == $tm )
	then
		insert( $tm );
		TextDataMatcher tdm = new TextDataMatcher( $text, $startpos, $endpos, $tm );
		insert( tdm);
		String type = "abstract";
		String subtype = "";
		Set<RuleInfo> ruleslist = new HashSet<RuleInfo>();
		RuleInfo ri = new RuleInfo( drools.getRule().getName() );
    	insert( ri );
    	ruleslist.add( ri );
		insert( new TextWrapper( tdm, ruleslist, new MatchInfo(type, subtype) ) );
end
*/